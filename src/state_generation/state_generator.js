import { EMP } from "../constants/index";
import { BLK } from "../constants/index";
import { WHT } from "../constants/index";

// Create the initial Game State using marble coordinates generated by input.js
export function createInitialState(marbleCoords) {

    let initialState = {
        i: { 5: EMP, 6: EMP, 7: EMP, 8: EMP, 9: EMP },
        h: { 4: EMP, 5: EMP, 6: EMP, 7: EMP, 8: EMP, 9: EMP },
        g: { 3: EMP, 4: EMP, 5: EMP, 6: EMP, 7: EMP, 8: EMP, 9: EMP },
        f: { 2: EMP, 3: EMP, 4: EMP, 5: EMP, 6: EMP, 7: EMP, 8: EMP, 9: EMP },
        e: { 1: EMP, 2: EMP, 3: EMP, 4: EMP, 5: EMP, 6: EMP, 7: EMP, 8: EMP, 9: EMP },
        d: { 1: EMP, 2: EMP, 3: EMP, 4: EMP, 5: EMP, 6: EMP, 7: EMP, 8: EMP },
        c: { 1: EMP, 2: EMP, 3: EMP, 4: EMP, 5: EMP, 6: EMP, 7: EMP },
        b: { 1: EMP, 2: EMP, 3: EMP, 4: EMP, 5: EMP, 6: EMP },
        a: { 1: EMP, 2: EMP, 3: EMP, 4: EMP, 5: EMP }
      };

    // Go through each coordinate string, convert it, and place each marble on the board.
    for (let i = 0; i < marbleCoords.length; i++){
      // must set to lower case to work with our object
      let letter = marbleCoords[i][0].toLowerCase();
      // get num
      let num = marbleCoords[i][1];
      // color
      let color = marbleCoords[i][2];

      // set up initial state using coordinates.
      if (color === "w") {
        initialState[letter][num] = WHT;
      } else {
        initialState[letter][num] = BLK;
      }
    }

    // return the initial state
    return initialState;
}

// This function generates a set for duo and trio neighbouring marbles
export function generateMoves(startingColour, marbleCoords, initialState){
  let state = initialState;
  // get coordinates of only the marbles we will be moving
  let single_marbles = getCoordinatesUsingColour(startingColour, marbleCoords);
  // generate a list of duoing neighbour marbles
  let duo_marbles = getMarblePairs(single_marbles, state);
  // generate a list of trio neighbour marbles
  // let trio_marbles = getMarbleTrios(single_marbles, state);

  // Go through each list of marbles and check and generate moves for each one.
  

}

// This function returns a list of duo marble neighbours
function getMarblePairs(coordinates, state) {
  let duo_marbles = [];
  for (let i = 0; i < coordinates.length; i++){
    let marble = coordinates[i];
    
  }
}

// This function returns a list of trio marble neighbours
function getMarbleTrios(coordinates, state){

}

// This function returns a list of neighbours.
function getNeighbours(coord, state){
  let letter = coord[0].toLowerCase();
  let num = coord[1];
  
}

// This function returns a list of coordinates for only the marbles that match the startingColour
function getCoordinatesUsingColour(startingColour, marbleCoords){
  let coordinates = [];
  // If the starting colour is white then get the coordinates for the white marbles
  if (startingColour.includes("w")){
    for (let i = 0; i < marbleCoords.length; i++){
      if (marbleCoords[i].includes("w")){coordinates.push(marbleCoords[i])};
    }
  // If the starting colour is black then get the coordinates for the black marbles
  } else {
    for (let i = 0; i < marbleCoords.length; i++){
      if (marbleCoords[i].includes("b")){coordinates.push(marbleCoords[i])};
    }
  }
  return coordinates;
}
